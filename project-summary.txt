Project Name:CarbonQuant
Project Title: Blockchain-Based Carbon Credit Ecosystem

Core Idea: This project is a decentralized application (DApp) built on the Ethereum blockchain that creates a transparent, secure, and efficient marketplace for trading carbon credits. It aims to solve the major problems of traditional carbon markets, such as lack of transparency, high transaction costs from intermediaries, and fraud like double-spending.

Technology Stack

- Blockchain: Ethereum
- Smart Contract Language: Solidity (^0.5.16)
- Development Framework: Truffle Suite (for compiling, testing, and deploying smart contracts)
- Local Blockchain: Ganache (for development and testing)
- Frontend Framework: Vue.js (^2.6.10)
- Frontend UI Library: BootstrapVue
- Blockchain-Frontend Connector: Web3.js (^1.7.0)
- User Authentication: Firebase (for managing user accounts and roles off-chain)
- Smart Contract Libraries: OpenZeppelin-Solidity (^2.1.1) for standard, secure contract components like ERC20.
- Runtime Environment: Node.js

System Architecture

The system is a DApp with three main layers:

1. Frontend (Client-Side): A Vue.js single-page application that provides the user interface. Users interact with this interface to perform actions. It uses Web3.js to communicate with the Ethereum blockchain, sending transactions and reading data from the smart contracts.
2. Backend (Smart Contracts): The core logic resides in two primary Solidity smart contracts deployed on the Ethereum blockchain. These contracts are immutable and govern all the rules of the ecosystem.
3. Blockchain (Decentralized Ledger): The Ethereum network acts as the database, storing all transaction records and the current state of the smart contracts (e.g., who owns which credits, what credits are for sale).

User Roles & Permissions

The system is built around four distinct user roles, with access control enforced by the smart contracts:

1. Regulator: The highest-level authority (the contract owner).
    - Functions: Can create new Generators, Consumers, and Validators. Has the ability to check for companies that have exceeded their emissions limit.
2. Validator: A trusted entity responsible for verifying real-world carbon reduction efforts.
    - Functions: Can allocate (mint) new carbon credit tokens to Generators. Can report the emissions of Consumers.
3. Generator: An entity that produces carbon credits (e.g., a company running a solar farm).
    - Functions: Receives minted credits from Validators. Can list their credits for sale on the marketplace.
4. Consumer: An entity that needs to buy carbon credits to offset its emissions.
    - Functions: Can buy credits listed on the marketplace. Can also list their own excess credits for sale.

Smart Contract Details

1. `CarbonCredit.sol`:
    - Standard: Implements the ERC-20 token standard, making carbon credits fungible tokens.
    - Data Structures: Uses structs to define Generator and Consumer data (ID, name, token balance, etc.). Uses mappings to store and retrieve data efficiently (e.g., mapping(uint => Generator) allGenerators).
    - Access Control: Uses modifier isRegulator() and modifier isValidator() to restrict critical functions to the correct roles.
    - Key Functions:
        - createGenerator(id, name, address): Regulator-only function to add a new generator.
        - createConsumer(id, name, address): Regulator-only function to add a new consumer.
        - allocateCredit(generatorId, credit): Validator-only function to mint new tokens.
        - reportEmissions(consumerId, emission): Validator-only function to log a consumer's emissions.
        - checkEmissions(): Regulator-only function to get a list of violators.

2. `MarketPlace.sol`:
    - Purpose: Acts as a decentralized exchange and escrow service for trading the carbon credit tokens.
    - Order Book Logic: Uses a mapping(uint => listing) to store listings by price and arrays (prices[], qty[]) to maintain a simple, sortable order book.
    - Key Functions:
        - listCredit(firmId, price, quantity): Allows a Generator or Consumer to put a specific quantity of their tokens up for sale at a certain price. The contract takes custody of these tokens.
        - buyCredit(buyer, quantity): Allows a Consumer to buy a certain quantity of credits. The function automatically fills the order by taking the cheapest available credits from the listings first. It handles the atomic swap of tokens to the buyer.

Frontend Application (vapp/)

- Structure: The src/ directory contains standard Vue.js folders. The most important are:
    - views/: Contains the main pages for each user role (regulator/, validator/, etc.).
    - components/: Contains reusable UI elements.
    - services/ContractService.js: A crucial file that abstracts the Web3.js logic. It initializes the connection to the blockchain and provides simple JavaScript methods (e.g., allocateCredit(...)) that the Vue components can call without needing to handle complex Web3 code directly.
- Authentication Flow:
    1. A user signs up/logs in via a Firebase authentication form in the web app.
    2. The user's role is specified upon login.
    3. The application displays the specific dashboard/view for that user's role.
    4. The user connects their MetaMask wallet, and the ContractService.js uses the selected account to sign and send transactions.

Core Project Workflow (Example)

1. Setup: The Regulator logs in and creates a Validator, a Generator (e.g., "Green Energy Inc."), and a Consumer (e.g., "Factory Corp").
2. Minting: The Validator logs in, verifies that "Green Energy Inc." has reduced emissions, and uses the allocateCredit function to mint 100 carbon credit tokens to them.
3. Listing: The Generator ("Green Energy Inc.") logs in, sees their 100 tokens, and decides to sell 50 of them. They use the listCredit function to put 50 tokens on the marketplace for a set price. The MarketPlace.sol contract now holds these 50 tokens in escrow.
4. Trading: The Consumer ("Factory Corp") logs in, sees the 50 credits available for sale, and uses the buyCredit function to purchase 20 of them.
5. Settlement: The MarketPlace.sol contract automatically transfers 20 tokens to "Factory Corp" and would (in a full implementation) transfer payment to "Green Energy Inc.". The listing is updated to show only 30 credits remaining for sale. All of these state changes are permanently recorded on the blockchain.
